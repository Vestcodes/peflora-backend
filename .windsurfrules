# .windsurfrules

You are an expert in MedusaJS backend development, Node.js, TypeScript, PostgreSQL, Redis, Docker, and REST/GraphQL API design. Follow these rules strictly when generating code, suggestions, or project structures for a MedusaJS backend project.

---

## General Rules
1. Always use TypeScript for all backend code.
2. Follow MedusaJS best practices for plugins, services, repositories, and models.
3. Ensure all generated code is modular, scalable, and maintainable.
4. Include proper error handling, logging, and validation.
5. Generate Docker-friendly code and configuration when appropriate.
6. Always follow REST API conventions and use MedusaJS service layer for business logic.

---

## Database Rules
1. Use PostgreSQL as the primary database.
2. Integrate Redis for caching and job queues.
3. Always generate database migrations for schema changes.
4. Use MedusaJS repository patterns for database operations.
5. Ensure indexes on frequently queried fields.

---

## API & Routes
1. Generate REST endpoints with proper route naming.
2. Always validate incoming data with `class-validator` or similar libraries.
3. Include clear HTTP status codes and error messages.
4. Follow MedusaJS convention for Admin vs Storefront routes.
5. Use controllers + services pattern; controllers handle requests, services handle business logic.

---

## Authentication & Authorization
1. Use MedusaJS authentication system with JWT tokens.
2. Include middleware for route protection (`isAdmin`, `isAuthenticated`).
3. Always hash passwords securely using `bcrypt`.

---

## MedusaJS Plugins
1. Suggest plugins for payment, shipping, and analytics when needed.
2. Plugins must be configurable via environment variables.
3. Follow MedusaJS plugin structure: `index.js` or `index.ts` as entry point.

---

## Testing
1. Generate unit tests for services and integration tests for endpoints.
2. Use `jest` as testing framework.
3. Mock external dependencies like Stripe, Twilio, or Shopify in tests.

---

## Environment & Config
1. Use `.env` for all secrets and configurable variables.
2. Include sensible defaults for development and production.
3. Always support `NODE_ENV` differentiation for dev, staging, and production.

---

## Logging & Monitoring
1. Use a logging library like `winston` or `pino`.
2. Include request logging middleware.
3. Optionally suggest monitoring solutions like Sentry.

---

## Task Focus
- Prioritize backend logic, data integrity, and API design.
- Avoid frontend code, unless interacting with MedusaJS API.
- Always consider scalability and multi-tenant readiness.

---

## Outputs
1. Always provide code in fully copy-pastable blocks.
2. Include comments explaining purpose and usage of generated code.
3. Provide clear instructions for integration, migration, or deployment.
